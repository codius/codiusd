{"version":3,"file":"SelfTest.js","sourceRoot":"","sources":["SelfTest.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { Injector } from 'reduct'\nimport Config from '../src/services/Config'\nimport { create as createLogger } from '../src/common/log'\nconst ilpFetch = require('ilp-fetch')\nconst log = createLogger('SelfTest')\nconst WebSocket = require('ws')\nconst manifestJson = require('./self-test-manifest.json')\nconst axios = require('axios')\nconst crypto = require('crypto')\nexport default class SelfTest {\n  private config: Config\n  constructor (deps: Injector) {\n    this.config = deps(Config)\n  }\n\n  start () {\n    this.run()\n      .catch(err => log.error(err))\n  }\n\n  async run () {\n    const duration = 300\n    const host = this.config.publicUri\n    try {\n      const randomName = crypto.randomBytes(20).toString('hex')\n      manifestJson['manifest']['name'] = randomName\n      log.debug('manifestJson', manifestJson)\n      let response = await ilpFetch(`${host}/pods?duration=${duration}`, {\n        headers: {\n          Accept: `application/codius-v1+json`,\n          'Content-Type': 'application/json'\n        },\n        maxPrice: (this.config.hostCostPerMonth * 1000000).toString(),\n        method: 'POST',\n        body: JSON.stringify(manifestJson),\n        timeout: 70000 // 1m10s\n      })\n      log.debug('ilpFetch Resp', response)\n      if (this.checkStatus(response)) {\n        response = await response.json()\n        const url = new URL(this.config.publicUri)\n        // Set 10 second timeout just for pod start\n        await new Promise(resolve => {\n          setTimeout(() => {\n            resolve()\n          }, 10000)\n        })\n        const webSocketPromise = new Promise(resolve => {\n          const ws = new WebSocket(`wss://${response.manifestHash}.${url.host}/websockets`)\n          ws.on('open', () => {\n            log.debug('Connection went through!')\n          })\n\n          ws.on('message', (message: string) => {\n            let finalMessage = JSON.parse(message)\n            if (finalMessage.websocketEnabled) {\n              resolve()\n            }\n          })\n\n          ws.on('error', (err: any) => {\n            log.debug('Error on connection for websockets', err)\n            if (!this.config.disableSelfTest) {\n              process.exit(1)\n            }\n          })\n        })\n\n        const serverPromise = new Promise(async resolve => {\n          try {\n            const serverRes = await axios.get(`https://${response.manifestHash}.${url.host}/server`)\n            const serverCheck = serverRes.data\n            log.debug('serverProm', serverCheck)\n            if (serverCheck.imageUploaded) {\n              // resolve promise\n              resolve()\n            }\n          } catch (err) {\n            log.error('Test contract not running')\n            if (!this.config.disableSelfTest) {\n              process.exit(1)\n            }\n          }\n        })\n        const testPromises = await Promise.all([serverPromise, webSocketPromise])\n          // Test that none of these promises are hanging for more than 60 seconds\n          // Timeout is set so that the contract has time to be pulled.\n        Promise.race([\n          testPromises,\n          new Promise((resolve, reject) => {\n            let timeout = setTimeout(function () {\n              clearTimeout(timeout)\n              reject(new Error('Could not listen to server or websocket'))\n            }, 60000)\n          })\n        ]).catch(err => {\n          log.error('Promise race err: ', err)\n          if (!this.config.disableSelfTest) {\n            process.exit(1)\n          }\n        })\n      } else {\n        log.error(`Failed to upload contract due to: ${response.error}`)\n        throw new Error(`Could not upload contract successfully due to: ${response.error}`)\n      }\n    } catch (err) {\n      log.debug('Upload Error', err)\n      if (!this.config.disableSelfTest) {\n        process.exit(1)\n      }\n    }\n  }\n\n  checkStatus (response: any) {\n    if (response && response.status) {\n      const statusString = `${response.status}`\n      if (statusString.startsWith('2')) {\n        return true\n      }\n    }\n    return false\n  }\n}\n"]}